DROP TABLE IF EXISTS users, film, rating_mpa, genre, film_genre, likes, friends, directors, films_directors, reviews, reviews_likes, feed CASCADE;

CREATE TABLE IF NOT EXISTS users
(
user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
email varchar(100) NOT NULL,
login varchar(100) NOT NULL,
name varchar(100) NOT NULL,
birthday date NOT NULL
);

CREATE TABLE IF NOT EXISTS rating_mpa
(
id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar (60) NOT NULL
);

CREATE TABLE IF NOT EXISTS film
(
film_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar (200) NOT NULL,
description varchar (200) NOT NULL,
release_date date NOT NULL,
duration REAL DEFAULT 1,
rating_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS genre
(
genre_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name varchar (100) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genre
(
genre_id integer NOT NULL,
film_id integer NOT NULL,
CONSTRAINT fk_film
FOREIGN KEY(film_id)
REFERENCES film (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_genre
FOREIGN KEY(genre_id)
REFERENCES genre (genre_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS likes
(
user_id integer NOT NULL,
film_id integer NOT NULL,
CONSTRAINT fk_film_likes
FOREIGN KEY(film_id)
REFERENCES film (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_user_likes
FOREIGN KEY(user_id)
REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS friends
(
user_id integer NOT NULL,
friend_id integer NOT NULL,
status boolean,
CONSTRAINT fk_user
FOREIGN KEY(user_id)
REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_user_friend
FOREIGN KEY(friend_id)
REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS feed
(
event_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
timestamps BIGINT      NOT NULL,
user_id    BIGINT     NOT NULL,
event_type varchar(10) NOT NULL,
operation  varchar(10) NOT NULL,
entity_id  BIGINT     NOT NULL,
CONSTRAINT fk_user_feed
FOREIGN KEY(user_id)
REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   int8       NOT NULL GENERATED ALWAYS AS IDENTITY,
    content     varchar    NOT NULL,
    is_positive boolean    NOT NULL,
    user_id     integer    NOT NULL,
    film_id     integer    NOT NULL,
    useful      integer    DEFAULT 0,
    CONSTRAINT reviews_pk PRIMARY KEY (review_id),
    CONSTRAINT reviews_film_fk FOREIGN KEY (film_id) REFERENCES film (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT reviews_user_fk FOREIGN KEY (user_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS reviews_likes
(
    review_id   int8       NOT NULL,
    user_id     integer    NOT NULL,
    is_like     boolean    NOT NULL,
    CONSTRAINT reviews_likes_pk PRIMARY KEY (review_id, user_id),
    CONSTRAINT reviews_likes_reviews_fk FOREIGN KEY (review_id) REFERENCES reviews (review_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT reviews_likes_users_fk FOREIGN KEY (user_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS directors (
id  integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS films_directors (
film_id integer REFERENCES film (film_id) ON DELETE CASCADE,
director_id integer REFERENCES directors (id) ON DELETE CASCADE,
UNIQUE (film_id, director_id)
);

ALTER TABLE film ADD FOREIGN KEY (rating_id) REFERENCES rating_mpa (id);
ALTER TABLE film_genre ADD CONSTRAINT key_film_genre PRIMARY KEY (genre_id, film_id);
ALTER TABLE friends ADD CONSTRAINT key_friends PRIMARY KEY (user_id, friend_id);
ALTER TABLE likes ADD CONSTRAINT key_likes PRIMARY KEY (user_id, film_id);

